import { Separator } from 'inquirer';
export { Separator };
declare type SeparatorInstance = typeof Separator extends (new () => infer Instance) ? Instance : never;
export declare type Separator = SeparatorInstance;
export declare type ExpandChoiceObject<T> = {
    readonly value: T;
    readonly key: string;
    readonly name: string;
    readonly short?: string;
} | SeparatorInstance;
export declare type CheckboxChoiceObject<T> = {
    readonly value: T;
    readonly checked: boolean;
    readonly name: string;
    readonly short?: string;
} | SeparatorInstance;
export declare type ChoiceObject<T> = {
    readonly value: T;
    readonly name: string;
    readonly short?: string;
} | SeparatorInstance;
export declare type Choice<T> = ChoiceObject<T> | Extract<T, string>;
export declare function list<T extends string>(message: string, choices: ReadonlyArray<T>, defaultValue?: T): Promise<T>;
export declare function list<T>(message: string, choices: ReadonlyArray<ChoiceObject<T>>, defaultValue?: T): Promise<T>;
export declare function rawList<T extends string>(message: string, choices: ReadonlyArray<T>, defaultValue?: T): Promise<T>;
export declare function rawList<T>(message: string, choices: ReadonlyArray<ChoiceObject<T>>, defaultValue?: T): Promise<T>;
export declare function expand<T>(message: string, choices: ReadonlyArray<ExpandChoiceObject<T>>, defaultValue?: T): Promise<T>;
export declare function checkboxes<T>(message: string, choices: ReadonlyArray<CheckboxChoiceObject<T>>): Promise<T[]>;
export declare function confirm(message: string, defaultValue?: boolean): Promise<boolean>;
export declare function input(message: string, defaultValue?: string, validate?: (value: string) => true | string): Promise<string>;
export declare function password(message: string, defaultValue?: string, validate?: (value: string) => true | string): Promise<string>;
export declare function editor(message: string, defaultValue?: string): Promise<string>;
