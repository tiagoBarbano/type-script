"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const inquirer_1 = require("inquirer");
exports.Separator = inquirer_1.Separator;
function getValue(p) {
    return p.value;
}
function getDefaultValue(choices, defaultValue) {
    if (defaultValue === undefined)
        return undefined;
    if (choices.every((c) => typeof c === 'string'))
        return defaultValue;
    const result = choices.findIndex((c) => c.value === defaultValue);
    if (result === -1)
        return undefined;
    return result;
}
async function list(message, choices, defaultValue) {
    return getValue(await inquirer_1.prompt([
        {
            type: 'list',
            name: 'value',
            message,
            choices,
            default: getDefaultValue(choices, defaultValue),
        },
    ]));
}
exports.list = list;
async function rawList(message, choices, defaultValue) {
    return getValue(await inquirer_1.prompt([
        {
            type: 'rawlist',
            name: 'value',
            message,
            choices,
            default: getDefaultValue(choices, defaultValue),
        },
    ]));
}
exports.rawList = rawList;
async function expand(message, choices, defaultValue) {
    return getValue(await inquirer_1.prompt([
        {
            type: 'expand',
            name: 'value',
            message,
            choices,
            default: getDefaultValue(choices, defaultValue),
        },
    ]));
}
exports.expand = expand;
async function checkboxes(message, choices) {
    return getValue(await inquirer_1.prompt([
        {
            type: 'checkbox',
            name: 'value',
            message,
            choices,
        },
    ]));
}
exports.checkboxes = checkboxes;
async function confirm(message, defaultValue = true) {
    return getValue(await inquirer_1.prompt([
        {
            type: 'confirm',
            name: 'value',
            message,
            default: defaultValue,
        },
    ]));
}
exports.confirm = confirm;
async function input(message, defaultValue, validate) {
    return getValue(await inquirer_1.prompt([
        {
            type: 'input',
            name: 'value',
            message,
            default: defaultValue,
            validate,
        },
    ]));
}
exports.input = input;
async function password(message, defaultValue, validate) {
    return getValue(await inquirer_1.prompt([
        {
            type: 'password',
            name: 'value',
            message,
            default: defaultValue,
            validate,
        },
    ]));
}
exports.password = password;
async function editor(message, defaultValue = '') {
    return getValue(await inquirer_1.prompt([
        {
            type: 'editor',
            name: 'value',
            message,
            default: defaultValue,
        },
    ]));
}
exports.editor = editor;
//# sourceMappingURL=index.js.map